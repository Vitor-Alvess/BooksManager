/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.vitorAlves.adapters.ui;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.vitorAlves.application.gateways.BooksDAO;
import org.vitorAlves.application.usecases.DeleteBook;
import org.vitorAlves.application.usecases.ImportBooksFromCsv;
import org.vitorAlves.application.usecases.InsertBook;
import org.vitorAlves.application.usecases.ListBooks;
import org.vitorAlves.domain.model.Book;
import org.vitorAlves.infra.gateways.CsvBooksImporter;
import org.vitorAlves.infra.gateways.JpaBooksDAO;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 *
 * @author vitor-alves
 */
public class MainWindowUI extends javax.swing.JFrame {
    
    private static final Logger logger = LoggerFactory.getLogger(MainWindowUI.class);
    
    private final BooksDAO dao = new JpaBooksDAO();
    private final ListBooks listBooks = new ListBooks(dao);
    private final InsertBook importBooks = new ImportBooksFromCsv(dao, new CsvBooksImporter());
    private final DeleteBook deleteBook = new DeleteBook(dao);
    
    private final DefaultTableModel model;
    /**
     * Creates new form MainWindowUI
     */
    public MainWindowUI() {
        initComponents();
        setLocationRelativeTo(null);
        
        model = (DefaultTableModel) booksTable.getModel();
        retrieveData(listBooks.listAllBooks());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        errorDialog = new javax.swing.JDialog();
        errorPanel = new javax.swing.JPanel();
        errorLabel = new javax.swing.JLabel();
        closeErrorButton = new javax.swing.JButton();
        successDialog = new javax.swing.JDialog();
        successPanel = new javax.swing.JPanel();
        successLabel = new javax.swing.JLabel();
        closeSuccessButton = new javax.swing.JButton();
        idChoosingFrame = new javax.swing.JFrame();
        idChoosingPanel = new javax.swing.JPanel();
        selectIdLabel = new javax.swing.JLabel();
        java.text.NumberFormat format = java.text.NumberFormat.getIntegerInstance();
        javax.swing.text.NumberFormatter formatter = new javax.swing.text.NumberFormatter(format);
        formatter.setValueClass(Integer.class);
        formatter.setAllowsInvalid(false);
        formatter.setMinimum(0);
        formatter.setMaximum(9999999);
        idFormattedTextField =  new JFormattedTextField(formatter);
        continueButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        tableScrollPane = new javax.swing.JScrollPane();
        booksTable = new javax.swing.JTable();
        searchTextField = new javax.swing.JTextField();
        filterComboBox = new javax.swing.JComboBox<>();
        searchButton = new javax.swing.JButton();
        resetTableButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        mainMenu = new javax.swing.JMenu();
        insertMenu = new javax.swing.JMenu();
        defaultInsertMenuItem = new javax.swing.JMenuItem();
        importInsertMenuItem = new javax.swing.JMenuItem();
        updateMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenuItem = new javax.swing.JMenuItem();

        errorPanel.setMinimumSize(new java.awt.Dimension(430, 50));
        errorPanel.setPreferredSize(new java.awt.Dimension(430, 50));

        errorLabel.setIcon(new javax.swing.ImageIcon("/home/vitor-alves/git/BooksManager/app/src/main/java/org/vitorAlves/adapters/assets/images/icons8-erro-48.png")); // NOI18N
        errorPanel.add(errorLabel);

        closeErrorButton.setText("Fechar");
        closeErrorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeErrorButtonActionPerformed(evt);
            }
        });
        errorPanel.add(closeErrorButton);

        errorDialog.getContentPane().add(errorPanel, java.awt.BorderLayout.CENTER);

        successPanel.setPreferredSize(new java.awt.Dimension(430, 50));
        successPanel.setLayout(new javax.swing.BoxLayout(successPanel, javax.swing.BoxLayout.X_AXIS));

        successLabel.setIcon(new javax.swing.ImageIcon("/home/vitor-alves/git/BooksManager/app/src/main/java/org/vitorAlves/adapters/assets/images/icons8-sucesso-48.png")); // NOI18N
        successLabel.setText("   Livros importados com sucesso!       ");
        successLabel.setName(""); // NOI18N
        successLabel.setPreferredSize(new java.awt.Dimension(60, 60));
        successPanel.add(successLabel);

        closeSuccessButton.setText("Fechar");
        closeSuccessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeSuccessButtonActionPerformed(evt);
            }
        });
        successPanel.add(closeSuccessButton);

        successDialog.getContentPane().add(successPanel, java.awt.BorderLayout.CENTER);

        idChoosingFrame.setBackground(new java.awt.Color(190, 190, 190));
        idChoosingFrame.getContentPane().setLayout(new javax.swing.BoxLayout(idChoosingFrame.getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        idChoosingPanel.setBackground(new java.awt.Color(190, 190, 190));
        idChoosingPanel.setMinimumSize(new java.awt.Dimension(250, 200));
        idChoosingPanel.setName(""); // NOI18N
        idChoosingPanel.setPreferredSize(new java.awt.Dimension(250, 200));
        idChoosingPanel.setLayout(new java.awt.GridBagLayout());

        selectIdLabel.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        selectIdLabel.setText("Selecione um ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 50, 10, 0);
        idChoosingPanel.add(selectIdLabel, gridBagConstraints);

        idFormattedTextField.setMinimumSize(new java.awt.Dimension(100, 24));
        idFormattedTextField.setPreferredSize(new java.awt.Dimension(100, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 40);
        idChoosingPanel.add(idFormattedTextField, gridBagConstraints);

        continueButton.setText("Continuar");
        continueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 59, 20, 58);
        idChoosingPanel.add(continueButton, gridBagConstraints);

        returnButton.setText("Voltar");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(6, 11, 8, 9);
        idChoosingPanel.add(returnButton, gridBagConstraints);

        idChoosingFrame.getContentPane().add(idChoosingPanel);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        booksTable.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        booksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Título", "Autores", "Data de Publicação", "ISBN", "Editoras", "Semelhantes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        booksTable.setToolTipText("");
        booksTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        booksTable.setAutoscrolls(false);
        booksTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        booksTable.setShowGrid(true);
        tableScrollPane.setViewportView(booksTable);

        searchTextField.setActionCommand("null");
        searchTextField.setPreferredSize(new java.awt.Dimension(150, 25));

        filterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Título", "Autor", "Data", "ISBN", "Editora", "Semelhante" }));
        filterComboBox.setPreferredSize(new java.awt.Dimension(80, 25));

        searchButton.setIcon(new javax.swing.ImageIcon("/home/vitor-alves/git/BooksManager/app/src/main/java/org/vitorAlves/adapters/assets/images/icons8-search-16.png")); // NOI18N
        searchButton.setPreferredSize(new java.awt.Dimension(70, 5));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        resetTableButton.setIcon(new javax.swing.ImageIcon("/home/vitor-alves/git/BooksManager/app/src/main/java/org/vitorAlves/adapters/assets/images/icons8-reboot-16.png")); // NOI18N
        resetTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetTableButtonActionPerformed(evt);
            }
        });

        menuBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mainMenu.setText("Menu");

        insertMenu.setText("Inserir");

        defaultInsertMenuItem.setText("Padrão");
        defaultInsertMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultInsertMenuItemActionPerformed(evt);
            }
        });
        insertMenu.add(defaultInsertMenuItem);

        importInsertMenuItem.setText("Importar (csv)");
        importInsertMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importInsertMenuItemActionPerformed(evt);
            }
        });
        insertMenu.add(importInsertMenuItem);

        mainMenu.add(insertMenu);

        updateMenuItem.setText("Editar");
        updateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(updateMenuItem);

        deleteMenuItem.setText("Deletar");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(deleteMenuItem);

        helpMenuItem.setText("Ajuda");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(helpMenuItem);

        menuBar.add(mainMenu);

        setJMenuBar(menuBar);
        menuBar.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1030, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(resetTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(filterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void defaultInsertMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultInsertMenuItemActionPerformed
        new InsertFormUI().setVisible(true);
    }//GEN-LAST:event_defaultInsertMenuItemActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        List<Book> newDataset = new ArrayList<>();
        Book book;
        List<Book> books;
        
        try {
            String text = searchTextField.getText().trim();
            if (text.isEmpty()) return;

            model.getDataVector().removeAllElements();

            switch(Objects.requireNonNull(filterComboBox.getSelectedItem()).toString()) {
                case "ID":
                    book = listBooks.getBookById(Long.valueOf(text));
                    if (book != null) newDataset.add(book);
                    break;
                case "Título":
                    book = listBooks.getBookByTitle(text);
                    if (book != null) newDataset.add(book);
                    break;
                case "Autor":
                    books = listBooks.getBooksByAuthor(text);
                    if (!books.isEmpty()) newDataset = books;
                    break;
                case "Data":
                    books = listBooks.getBooksByPublishDate(LocalDate.parse(text));
                    if (!books.isEmpty()) newDataset = books;
                    break;
                case "ISBN":
                    book = listBooks.getBookByIsbn(text);
                    if (book != null) newDataset.add(book);
                    break;
                case "Editora":
                    books = listBooks.getBooksByPublisher(text);
                    if (!books.isEmpty()) newDataset = books;
                    break;
                case "Semelhante":
                    books = listBooks.getBooksBySimilar(text);
                    if (!books.isEmpty()) newDataset = books;
                    break;
            }
        }
        catch (Exception e){
            logger.error("Campo {} preenchido incorretamente!", filterComboBox.getSelectedItem().toString());
            errorLabel.setText("<html>Ocorreu um erro na filtragem de livros!<br>" +
                    "Verifique os logs da aplicação!</html>");
            errorDialog.setLocationRelativeTo(null);
            errorDialog.setMinimumSize(new Dimension(430, 60));
            errorDialog.setVisible(true);
        }
        
        retrieveData(newDataset);
            
    }//GEN-LAST:event_searchButtonActionPerformed

    private void resetTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetTableButtonActionPerformed
        model.getDataVector().removeAllElements();
        searchTextField.setText("");
        filterComboBox.setSelectedIndex(0);
        retrieveData(listBooks.listAllBooks());
    }//GEN-LAST:event_resetTableButtonActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained

    }//GEN-LAST:event_formFocusGained

    private void importInsertMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importInsertMenuItemActionPerformed
        try {
            logger.info("Iniciando importação...");
            
            JFileChooser fileChooser = new JFileChooser();
            int response = fileChooser.showOpenDialog(null);

            if (response == JFileChooser.APPROVE_OPTION) {
                String pathToFile = fileChooser.getSelectedFile().getAbsolutePath();

                if (!pathToFile.toLowerCase().endsWith(".csv")) 
                    throw new IllegalArgumentException("O arquivo a ser importado deve ser to tipo .csv");
                
                importBooks.executeImport(pathToFile);
                
                displaySuccessDialog("   Livros importados com sucesso!       ");
                logger.info("Importação realizada com sucesso!");
            }
        }
        catch(Exception e) {
            logger.error("Importação falhou\n\t{}: {}", e.getClass().getSimpleName(),e.getMessage());
            errorLabel.setText("<html>Ocorreu um erro ao importar livros!<br>" +
                    "Verifique os logs da aplicação!</html>");
            errorDialog.setLocationRelativeTo(null);
            errorDialog.setMinimumSize(new Dimension(430, 60));
            errorDialog.setVisible(true);
        }       
    }//GEN-LAST:event_importInsertMenuItemActionPerformed

    private void closeErrorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeErrorButtonActionPerformed
        errorDialog.setVisible(false);
    }//GEN-LAST:event_closeErrorButtonActionPerformed

    private void closeSuccessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeSuccessButtonActionPerformed
        successDialog.setVisible(false);
    }//GEN-LAST:event_closeSuccessButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        idChoosingFrame.dispose();
    }//GEN-LAST:event_returnButtonActionPerformed

    private void updateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMenuItemActionPerformed
        int rowIndex = booksTable.getSelectedRow();
        
        long idValue = (long) booksTable.getValueAt(rowIndex, 0);
        
        new UpdateFormUI(idValue).setVisible(true);
    }//GEN-LAST:event_updateMenuItemActionPerformed

    private void continueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueButtonActionPerformed
        try {
            String text = idFormattedTextField.getText();
            int id = Integer.parseInt(idFormattedTextField.getText().trim());
        
            Book activeBook = listBooks.getBookById(Long.valueOf(id));
            if (activeBook == null) throw new IllegalArgumentException("Id não encontrado");
            
            deleteAction(id);
            

            idChoosingFrame.setVisible(false);
        }
        catch (Exception e) {
            logger.error("{}: {}", e.getClass().getSimpleName(), e.getMessage());
            errorLabel.setText("<html>Ocorreu um erro ao encontrar o livro!<br>" +
                    "Verifique os logs da aplicação!</html>");
            errorDialog.setLocationRelativeTo(null);
            errorDialog.setMinimumSize(new Dimension(430, 60));
            errorDialog.setVisible(true);
        }
        
    }//GEN-LAST:event_continueButtonActionPerformed

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        idChoosingFrame.setTitle("Deletar");
        idChoosingFrame.setLocationRelativeTo(null);
        idChoosingFrame.setSize(250, 200);
        idChoosingFrame.setVisible(true);
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        new TutorialUI().setVisible(true);
    }//GEN-LAST:event_helpMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable booksTable;
    private javax.swing.JButton closeErrorButton;
    private javax.swing.JButton closeSuccessButton;
    private javax.swing.JButton continueButton;
    private javax.swing.JMenuItem defaultInsertMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JDialog errorDialog;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JPanel errorPanel;
    private javax.swing.JComboBox<String> filterComboBox;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JFrame idChoosingFrame;
    private javax.swing.JPanel idChoosingPanel;
    private javax.swing.JFormattedTextField idFormattedTextField;
    private javax.swing.JMenuItem importInsertMenuItem;
    private javax.swing.JMenu insertMenu;
    private javax.swing.JMenu mainMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton resetTableButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JLabel selectIdLabel;
    private javax.swing.JDialog successDialog;
    private javax.swing.JLabel successLabel;
    private javax.swing.JPanel successPanel;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JMenuItem updateMenuItem;
    // End of variables declaration//GEN-END:variables

    private void displaySuccessDialog(String label) {
        successLabel.setText(label);
        successDialog.setLocationRelativeTo(null);
        successDialog.setMinimumSize(new Dimension(430, 60));
        successDialog.setVisible(true);
    }
    
    private void retrieveData(List<Book> dataset) {
        if (dataset.isEmpty()) {
            model.addRow(new Object[]{});
            return;
        }

        dataset.forEach(book -> {
            Object[] rowData = book.getData();
            model.addRow(rowData);
        });
    }

    private void deleteAction(int id) {
        try {
            logger.info("Deletando livro...");
            
            deleteBook.execute(Long.valueOf(id));
            
            logger.info("Livro deletado com sucesso!");
            
            displaySuccessDialog("   Livro deletado com sucesso!      ");
        }
        catch (Exception e){
            logger.error("Deleção falhou\n\t{}: {}", e.getClass().getSimpleName(), e.getMessage());
            errorLabel.setText("<html>Ocorreu um erro ao deletar o livro!<br>" +
                    "Verifique os logs da aplicação!</html>");
            errorDialog.setLocationRelativeTo(null);
            errorDialog.setMinimumSize(new Dimension(430, 60));
            errorDialog.setVisible(true);
        }
    }
}
